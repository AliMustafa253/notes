===Introduction===

	==Client-server model ==

		- Amazon Elastic Compute Cloud EC2 -- > Server
		- You only pay for what you use
		- AWS instances = click and pay for what you need
	
	==What is cloud computing?==
	
		**On Demand Delivery of IT resources over the internet with pay
		  as you go pricing.
		
		- undifferentiated heavy lifting of IT = AWS helps with it as 
			they dont differentiate companies, how you build and manage matters 
			not if you can install or how you backup as the engine is just the engine

		--Deployment Modules--
			-Cloud-based Deployment: run all parts on cloud. 
				migrate/design or build applications on cloud
				
			-On-Premises Deployment: virtualization and resource mng tools 
				aka private cloud deployment
			-Hybrid Deployment: cloud based connected with on premise infrastructure
			
		--Benefits--
			Trade upfront expense
			Maintain data centers/
			stop guessing capacity = prevent excess or limit capacity
			economies of scale = larger user base
			Inc speed and agility
			global infrastructure diff servers
			
===EC2===
	elastic compute cloud (amazon ec2)
	
	- Highly flexible
	- cost effective
	- quick		
		research and buy upfront, datacenter etc
	
	virtualization technology used for sharing hosts
	
	**Multitency: sharing resources 
			hypervsior responsible for it
		configurations choosable
			Windows/Linux
			Web apps
			Databases
			Third party softwares
			
		Launch connect use
		
	--Instance types--
		- General purpose: balanced/web servers
		- Compute Optimized: Processure/ gaming web servers
		- Memory Optimized: high performance db
		- Accelerated computing: Grapic process
		- Storage optimized: data warehousing, high read and write
		
	--EC2 pricing--
		- On demand: how much it runs for : unpredictable usage not for longer terms
		- Savings Plan: contract and consistent amount in 1 or 3 years term save upto 72% vs on demand
		- Reserved Instances: 1 or 3 partial or upfront some instances
		- Spot Instances: Can be interrupted: No contracts or commitments
			Batch instances best 2 minutres warning upto 90% discount
		- Dedicated Hosts: No sharing
		
	--Scalability And Elasticability-
		Scalability: refers to begining with only resources you need and 
			design in a way to auto respond to demand by scaling
		
		EC2 Auto Scaling: automatically add or remove ec2 instances
			- Dynamic scaling responds to demand
			- Predictive scaling right number based on prediction
			
		decoupling = allows to get exact amount of resources req
					-backend etc
					
		desired is minimum by default
		
	--Elastic Load Balancing--
		DECOUPLED ARCHITECTURE
		single point to direct to different routes
			in front end and backend both
		
		Even distribution = need a route = need a load balancer
		
		properly distribute traffic = via ELB
		
		regional construct. Automatically highly scalable
		
	--Messaging and queuing--
		tightly coupled architecture = single component change = issues
		
		loosely coupled = buffer in between with  queing
		
		***Simple Queue Service And Notification Service
			*SQS: send store receive messages at any volu,messages
			
			*SNS: publish/subscription service. messages and notifications, 
			channel messages etc 2 different method
				
		Monolothic Architecture = tightly coupled can break down
		Microservices = loosely coupled AWS allows microservices 
		
	-Management processes-
			Serverless: cannot see or access underlying infrastructure. ez scaling
			
			AWS Lambda: Lambda function = wait for trigger and runs on an
				managed env automatically scalable
				run under 15min codes	eg resize image whn uploaded
				pay for compute time only
		
		Container: package for your code.
		Clusters = containers.
			Run containers at scales use these
		EC2 for access and underlying
		AWS no underying
		
		Docker container based ECS or EKS
		--ECS--
			Elastic COntainer Service= scalable supports docker
		--EKS--
			Elastic Kubernetes Service = run Kubernetes on AWS
		Ur own list or fargate
		--AWS Fargate--
			Donot need to provision or manage servers
			
	
	
	
			
			