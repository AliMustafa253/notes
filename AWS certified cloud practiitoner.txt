===Introduction===

	==Client-server model ==

		- Amazon Elastic Compute Cloud EC2 -- > Server
		- You only pay for what you use
		- AWS instances = click and pay for what you need
	
	==What is cloud computing?==
	
		**On Demand Delivery of IT resources over the internet with pay
		  as you go pricing.
		
		- undifferentiated heavy lifting of IT = AWS helps with it as 
			they dont differentiate companies, how you build and manage matters 
			not if you can install or how you backup as the engine is just the engine

		--Deployment Modules--
			-Cloud-based Deployment: run all parts on cloud. 
				migrate/design or build applications on cloud
				
			-On-Premises Deployment: virtualization and resource mng tools 
				aka private cloud deployment
			-Hybrid Deployment: cloud based connected with on premise infrastructure
			
		--Benefits--
			Trade upfront expense
			Maintain data centers/
			stop guessing capacity = prevent excess or limit capacity
			economies of scale = larger user base
			Inc speed and agility
			global infrastructure diff servers
			
===EC2===
	elastic compute cloud (amazon ec2)
	
	- Highly flexible
	- cost effective
	- quick		
		research and buy upfront, datacenter etc
	
	virtualization technology used for sharing hosts
	
	**Multitency: sharing resources 
			hypervsior responsible for it
		configurations choosable
			Windows/Linux
			Web apps
			Databases
			Third party softwares
			
		Launch connect use
		
	--Instance types--
		- General purpose: balanced/web servers
		- Compute Optimized: Processure/ gaming web servers
		- Memory Optimized: high performance db
		- Accelerated computing: Grapic process
		- Storage optimized: data warehousing, high read and write
		
	--EC2 pricing--
		- On demand: how much it runs for : unpredictable usage not for longer terms
		- Savings Plan: contract and consistent amount in 1 or 3 years term save upto 72% vs on demand
		- Reserved Instances: 1 or 3 partial or upfront some instances
		- Spot Instances: Can be interrupted: No contracts or commitments
			Batch instances best 2 minutres warning upto 90% discount
		- Dedicated Hosts: No sharing
		
	--Scalability And Elasticability-
		Scalability: refers to begining with only resources you need and 
			design in a way to auto respond to demand by scaling
		
		EC2 Auto Scaling: automatically add or remove ec2 instances
			- Dynamic scaling responds to demand
			- Predictive scaling right number based on prediction
			
		decoupling = allows to get exact amount of resources req
					-backend etc
					
		desired is minimum by default
		
	--Elastic Load Balancing--
		DECOUPLED ARCHITECTURE
		single point to direct to different routes
			in front end and backend both
		
		Even distribution = need a route = need a load balancer
		
		properly distribute traffic = via ELB
		
		regional construct. Automatically highly scalable
		
	--Messaging and queuing--
		
		
<<<<<<< HEAD
		***Simple Queue Service And Notification Service
			*SQS: send store receive messages at any volu,messages
			
			*SNS: publish/subscription service. messages and notifications, 
			channel messages etc 2 different method
				
		Monolothic Architecture = tightly coupled can break down
		Microservices = loosely coupled AWS allows microservices 
		
	-Management processes-
			Serverless: cannot see or access underlying infrastructure. ez scaling
			
			AWS Lambda: Lambda function = wait for trigger and runs on an
				managed env automatically scalable
				run under 15min codes	eg resize image whn uploaded
				pay for compute time only
		
		Container: package for your code.
		Clusters = containers.
			Run containers at scales use these
		EC2 for access and underlying
		AWS no underying
		
		Docker container based ECS or EKS
		--ECS--
			Elastic COntainer Service= scalable supports docker
		--EKS--
			Elastic Kubernetes Service = run Kubernetes on AWS
		Ur own list or fargate
		--AWS Fargate--
			Donot need to provision or manage servers
			
==AWS global infrastructure==
	different datacenters
		high availability and fault tolerance
		Each region isolated unless you allow
		data in one region
		
	Regions according to where business is
	- Compliance with regulations ===>  legal and goverment.
	- Proximity ===> Latency
	- Feature Availability ====> regions have diff services as new hardware needed
	- Pricing ===> Brazil = more expensive
=======
>>>>>>> parent of ea4772f (update aws)
	
	Availibility zone	= mulitple zones in one region. not right next to each other
		Atleast 2 AZ	ElasticLoadBalance run in all AZ	= Regionally scoped service
	
	--Amazon Cloudfront--
		***content delivery service
		services to customers everywhere = edge locations
			Seperate from regions = push content to edge locations
	**Aws outpost
			isolated within own building. uses AWS resources so ig on premises deployment
	*EDGE LOCATIONS RUN AMAZON CLOUDFRONT Stores cached copies of your content
		closer to customers for faster delivery
		
	--AWS management console--
		Visually command 
		Test envview aws bills
		view monitoring
	
	manually doing means error possible
	--AWS CLI--
		make api calls
		can make it scriptable and repeatable
	--AWS SDK--
		interact through various programming languages
	--AWS Elastic Beanstalk--
		- provide code and config
		
		-adjust capacity
		-automatic scaling
		-Application health monitoring
			- Takes info and makes env
			- Save env config
			- Convenience to not manage and give visibility
	--AWS CloudFormation--
	safe repeatable manner
		-Json and yaml
			- Storage
			- ML etc
==NETWORKING==
	--Amazon Virtual Private Cloud--
		local for backend usually
		Establish boundaries in ur aws resources
	--VPC--
		Different subnets
		some internet reaching places and some only for local networks
		Public facing traffic = needs an internet gateway
		virtual private gateway Allows protected internet traffic into VPC
		
		Private traffic = Virtual Private Gateway
			Still sharing resources with others so slowing possible
	--AWS direct connect--
		private dedicated private connection
		
	network hardenin, application security, user identity, auth and authorization, 
	ddos prevent, data integrity, encryption
	
	--subnet--
		group resources based on security or operational needs.
		public(online store site) and private (access via db)
	
	---Network Hardening---
		VPC subnets can control packet info. checklists
		
			--Network Access control list (ACL)
				passport control officer. allow in or not and not allow in VPC.
				Stateless.
				default allow all
				
			--security group. All ports are blocked in each instance in subnet.
				multiple ec2 in subnet. Sec group = doorman, check list but wont bother out
				Stateful.
				default. allow all inbound deny allow all outbound traffic
				
			Instant stateful changing
			
	---Global Network---
		DNS resolver
		--Amazon Route 53--
			translate website names into ip which comp can reads
			direct to different route points
				- Latency-based routing.
				- Geolocation DNS.
				- Geoproximity routing.
				- Weighted round robin.
				
		--Amazon Cloudfront--
			CDN helps deliver edgelocations acc to geolocation.
			
		--DNS--
			Phonebook of the internet
			dns resolution is the process of translating domain name to IP
			
		--Example--
		 
		- customer requests data from the application by going to AnyCompany’s website. 
		- Amazon Route 53 uses DNS resolution to identify AnyCompany.com’s
		  corresponding IP address, 192.0.2.0. This information is sent back to the customer. 
		- The customer’s request is sent to the nearest edge location
		  through Amazon CloudFront. 
		- Amazon CloudFront connects to the Application Load Balancer,
		  which sends the incoming packet to an Amazon EC2 instance.
			
===Storage and Databases===
	--block level storage--
	store files. series of bytes which is blocks on discs.
	Hard drive.
	
	--Instance Store Volumes--
		Attached to EC2
		Removes if EC2 stopped.
		Useful in temp and scratch data.
		Dont write data in ec2 instance
		physically attached
		
	--Amazon EBS--
		-Elastic Block Store
		-size 
		-types
		-config
		
		provision and write to volume.
		EBS Snapshots = regular backups
			incremental backup
	--Amazon S3---
		-Simple storage service.
		-Store data as objects in buckets
		each object consists of data, metadata and a key
		-5Tb
		-Version Objects, can keep prev ver
		-create multiple buckets
		
		-S3 standard.
			- 99.999999% durability after one year. freq access data designed 4
			- Atleast 3 locations stored.
			- higher cost than others intended for less frequent access data
		-S3 static website hosting.
			- html files akin to a file. instant website.
		-S3 Standard-Infrequent Access
			- higher retrieval price lower storage price.
			- Suited for immediate available But infrequent Access.
			0 infreq ass but high availability. min 3 Availability Zones
		-S3 One Zone- IA = for ez to reproduce data
		-S3 Intelligent-Tiering
			-Unknown or changing access pattern.
			- Small monthly monitoring and automation fee.
			- monitors objects' access patterns
		-S3 Glacier
			--Glacier Instant Retrieval--
				works well for archived data req immediate access.
			--Glacier Flexible Retrieval-- = low cost
			
			-Glacier Deep Archive--
				- Lowest cost object storage class ideal for archiving.
				- able to retrieve objects within 12 hours.
				- long-term retention and digital preservation for data.
				- 3 AZ
			- Archive data.
			- create vault
			- S3 glaciar vault policy and lock glacier. 
			- 3 options of retrieval.
			
		-Amazon S3 Outpots- = on premise AWS outpost. 
			durably and redundantly
			good for local data residency req by keeping data close to on premise app
		
		-S3 lifecycle management. = allows diff options and config
	
	---EBS v.s S3---
	-16 TB v.s  unlimited Storage.
	-Solid State v.s not
	
	Object = reupload entire file.
	
	block storage stores in blocks. = 80gb only edit part of it
		Best for EBS
	//S3
		**Web enabled, Regionally Distributed,
		**Offers cost savings
		Severless.
		Occasional changes and complete objects
		Write Once Read many
		
	//EBS
		Complex,read,right functions = EBS
		micro changes
		16 TB
		Solid State, survive termination of EC2 instance
		
			