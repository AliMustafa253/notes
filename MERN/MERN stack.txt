MERN
	
	----React----
		Client side library allowed you to build reactive UI
			Render UI with dynamic Data
			Handle User Input
			Communicate with Backend Services

	----Node----
		run js outside browser. Generally for server-side programming language
		
		listen to req and send response. 
		Execute server-side logic
		interact with db
	
	----Express----
		Framework simplifying server-side code and logic.
		
			Middleware based: funnel req through functions
			routing view rendering etc
			
	----MongoDB----
		NoSQL DB documents in collections instead of records in tables.
		
			Store app data.
			No Schema required.
			easy to connect to node/express (dont connect to react for security)
		
		files should be stored in a file system
		other data like user user id etc in mongodb
		connected to server as db credentials required. frontend data = reaadable by users so
		insecure
			
	Frontend User Input Validation
	Backend User Input Validation
	
	request and responses = AJAX 
		exchange data in formats like JSON, 
		
	
	=====Backend=====
	
		Backend == API
		
		---REST V.S GraphQL API---
			---REST (representational state transfer)---
				Uses Urls + http Verbs for different actions
				
				API is stateless and decoupled from any frontend
				Can use on any frontend
				
				developers allow endpoints.
				POST GET PUT PATCH DELETE OPTIONS
				
				
			
			---GraphQL---
				one URL + http Verbs (=one endpoint)
				accepts query commands via query language
				
				Query expression
		
				API is stateless and decoupled

				Extra Query Language to learn
					
					ONE SINGLE ENDPOINT
						POST /graphql eg
							request body = query request
								{ query { user (identifier operation "endpoint") { requested fields}
								}}
			
	Connect React and SPA with apis or can take all react req
	via server-side rendered pages via ejs,pug etc. Otherwise seperated
	
	
====Planning the app====
	
	--Idea--
		solve a problem/ come up with an idea.
		Create a design/sketch
		Plan your data models (the data you'll work with)
		Plan your endpoints (API,backend) and pages
		
		---Frontend design (lowfi etc)---
			/ List of Users										Always reachable
			/:uid/places/	List of Places for selected User	//
			/authenticate	signup + Login Forms				Only UnAuth
			/places/new		New Place Form						Authenticated
			/places/:pid	Update Place Form					Authenticated
		
		---Application Data---
			User
				Name
				Email
				Password
				Images
			
			Places
				Title
				Description
				Address
				Location
				Image
			One to many relationship with user and place
			
		API endpoints
			/api/users/
			GET../		POST../signup 	POST ../login
			/api/places/..
			GET ../user/:uid	GET ../:pid	POST ../	PATCH ../:pid	DELETE ../:pid
			
			
		await = wait for try and catch 
		
		for promise .then()/.catch() etc
			
=====React=====

	JS library for building user interfaces.
		started an huge eco system "psuedo framework"
		
		Declarative Approach(React): You define the result not the steps that lead to it
			imperative approach (normal js): you define all the steps
			
		Components
		JS runs on browser things run immediately as everything is already there.

		One html page served from some server.
		React re renders = SPA
			Routes (react-router-dom)
				route config + page components
			State Management (Hooks,Redux)
				hooks,redux logic
			Components + Styling
				utility,ui components
				
	---JSX---
		similar to React.createElement('h1',{},"text")
		return <h2> </h2>
		html like code inside js
		{} merge jsx with some js functionality
		
	---components---
		Functional components = modren way to use react.
		Function = pure js function returns jsx
					cant be kept alive
					Stateless, simply accept data and display them
					No lifecycle methods
		
		Class = extends react and render function used return jsx
				runs at diff lifecycles
				Stateful, implement logic and state
				Lifecycle methods can be used
				
		Capital letter = custom Component 
		
	---Prop---
		use map to convert each list item to jsx.
		React uses the key prop create a relationship between the component and the DOM element.
		The library usesthis relationship to determine whether or not the
		component should be re-rendered.
		
		--Callback Function--
			to go from child component to parent component
			
			call pointer to function to new component
			will call the function in parent component
		
	---Event---
	event.preventDefault();
		prevent request to backend. if only serves single html file here
	The event.preventDefault() method stops the default action of an element from 
	happening. e.g
		Prevent a submit button from submitting a form
		Prevent a link from following the URL
		
		
	---State--- Hook
	**Re render only happens when state changes. YOU HAVE TO TELL. ignore otherwise
	
		Functional components use hook components to manage data
		manage state to re render
	
	const [state,setState] = useState([{test:'1', text:'dummy'}])
	
	*Schedules state update in setState. Update queue. So pass function instead of concat.
	function = guarantee order etc
	***State update depends on previous state data = use Function
	
	
	
	====================
	<Redirect to="/" />
	EXACT = exactly this and not all routes that have this.
	
	<Switch> component allows you to redirect only when <route path="/test">
	etc not accurate
	
	ftn = () => (<userItems>) == no need for return
	
	pages do minimum stuff components etc main delegated
	
	
	<a> anchor tag = real link = brand new page
	
	React Router Dom blocks default path and loads appropriate component.
	
	
	======================
	Presentational v.s Stateful Components
	
	presentational = dumb only styling etc
	
	stateful = smart
	
	=======================
	props.children
	refers to everything between opening and closing tag
	everything insides it. placeholder for it
	
	***Cant return multiple diff values in js like return 1 2; so cant return
	<header/> <main /> 
	
	<React.Fragment>
	
	----Portals-----
	Mark a new place where we want to render our portal content
	
	deeply inside element tree inside dom otherwise. 
	Make it somewhere other than the tree
	Content inside component
	
	React Portal comes in handy when we need to render child components outside
	the normal DOM hierarchy without breaking the event propagation's default
	behavior through the React component tree hierarchy. 
	This is useful when rendering components such as modals, tooltips, popup 
	messages, and so much more.
	
	session = stop whn browser closed.
	local and cookies can be stored.
	
	
	=====HOOKS=======
	useState
	
	useParams
	/:placeid/
	
	useRef
		store data across re render cycles
		can be used to connect to dom element (for images etc)
	useEffect
		ftn/logic when certain inputs change or [] when start or unmount
		after runstate
		
	useReducer
		v.s useState = can manage complex states as well
	
	useCallback
		wrap around ftn or smthn with useEffect to avoid cycle
		
	useContext
		checks context and allows refresh component when changed
		
	Custom Hooks
	
	
	====================
	*****EVENT.PREVENTDEFAULT
	Do not reload page by triggering submission etc
	
	*****OBJECT DESTRUCTURING 
	const { center, zoom } = props
	------Google Maps--------
	AIzaSyCRw4eql8o1sszK8e56SD1ZyQXLpmJoykk
	
	order matters for places/:placeid and place/new as new will
	be assumed as placeid if placed later
	
	*****HOOKS ONLY ALLOWED DIRECTLY IN FUNCTION COMPONENT (NO IF WHEN ETC)
	
	==========================
	REACT CONTEXT
	
		add on top of react app component
		
		useContext
		
		
		
============NODE JS EXPRESS==============

	---What is nodejs?---
	
		- A host environment for JS/ JS runtine env
		- V8 = out of chrome and maintained as a standalone project = nodejs
		- Allows js out of browser. (cant use dom anymore as no dom)
		- Can use file systems
	
	require() function in nodejs
	
	async = nodejs environment
	
	
	---What is Express---
		- A framework for nodejs = makes web apps easier and 
		- middleware focused.
		
	--save = core app dependency
	
	--save-dev only for dev
	
	Express = --save
	
	app = express ();
	
	app.use((req,res,next) =>{}); = middle ware
	
	incoming request sent on chunks
	
	middleware based approach = out of box framworks etc so we focus on business logic
	
	cant access file inside node accessible outside server.
	goes into middleware funnel and only logic inside middleware is executed
	
	=========
	ORDER MATTERS in routes /:pid can consuem /user so /user should be above
	and /:pid /user/:uid cannot be consumed
	Browser sends Options before other req (except get)
	
	4 paras = error app.use((error,req,res,next)=> {})
	adds to all errrors
	
	**encodeURIComponent() === make string URL friendly formated
	
	***SPA backends (APIS) are stateless and decoupled from frontend
		so use tokens
		
	token in headers or query/ bodies not always available as get/delete etc

	
	
============Mongoose and MongoDb==============

	MongoDB 
		Nosql Stores Documents in collections
			instead of records in tables in sql
			
		Store app data, no data schema or relations
		
		ez for node/express
		
	----NoSql v.s Sql----
	- Mongodb,couchdb,redis v.s mysql,ms sql
	- Enforces no Data Schema --> flexible
	- Less focus on relations.
	- Independent Documents/ not related
	- Great for logs,orders chat messages. = fast
	
	- Sql = shopping carts contracts, networks
	
	---Why not direct connect with front end?---
	provides credentials ---> expose credentials to everyone who uses browser.
	
	---mongodb atlas---
	
	cluster = ur server can contain multiple servers
	
	====Mongoose====
	findById()
	find(). in array can also do it by cursor = iterate through results
	async 
	toObject cannot be used with array so map it 
	
	unique = makes quering faster so add it whn needed
	
	
	USE AS 2 DBS/MULTIPLE OPERATIONS DONE SO IF ONE FAILS THEN BOTH RETURNED
	***session
	***transaction
	Transaction = need to create collection manually
	Only pushes when all done
	
	push = establish connection in mongoose with mongodb adds placesId
	
	Multipart = binary and json stuff can be added
	
============MERGE==============

	CORS
	browser specific = postman doesnt care 
	
	front end validation can be disabled by user so backend validation done
	any async function always returns a promise
	
	
=============Deployment============
	Develop and test your code
	
	Swap URLs and credentials for production ready ones.
	
	Build and Deploy
	
	.env.production
	
	****Lazilly load stuff = code splitting
	
	Deploy Two Seperated Apps Or Deploy One Combined App
	react app = static hosting possible
	node rest api = need other aps like our own node.js host or aws/heroku
	


	